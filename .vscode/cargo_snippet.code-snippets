{
  "bin_search": {
    "scope": "rust",
    "prefix": "bin_search",
    "body": [
      "/// 二分探索をする",
      "/// ```text",
      "/// ng ng ng ok ok ok",
      "///          ↑ここの引数の値を返す",
      "/// ```",
      "/// 計算量: O(log(|ok - ng|))",
      "/// ## Arguments",
      "/// * ok != ng",
      "/// * |ok - ng| <= 2^63 - 1, |ok + ng| <= 2^63 - 1",
      "/// * p の定義域について",
      "///     * ng < ok の場合、p は区間 ng..ok で定義されている。",
      "///     * ok < ng の場合、p は区間 ok..ng で定義されている。",
      "/// * p の単調性について",
      "///     * ng < ok の場合、p は単調増加",
      "///     * ok < ng の場合、p は単調減少",
      "/// ## Return",
      "/// * ng < ok の場合: I = { i in ng..ok | p(i) == true } としたとき",
      "///     * I が空でなければ、min I を返す。",
      "///     * I が空ならば、ok を返す。",
      "/// * ok < ng の場合: I = { i in ok..ng | p(i) == true } としたとき",
      "///     * I が空でなければ、max I を返す。",
      "///     * I が空ならば、ok を返す。",
      "pub fn bin_search<F>(mut ok: i64, mut ng: i64, p: F) -> i64",
      "where",
      "    F: Fn(i64) -> bool,",
      "{",
      "    assert!(ok != ng);",
      "    assert!(ok.checked_sub(ng).is_some());",
      "    assert!(ok.checked_add(ng).is_some());",
      "    while num::abs(ok - ng) > 1 {",
      "        let mid = (ok + ng) / 2;",
      "        assert!(mid != ok);",
      "        assert!(mid != ng);",
      "        if p(mid) {",
      "            ok = mid;",
      "        } else {",
      "            ng = mid;",
      "        }",
      "    }",
      "    ok",
      "}"
    ]
  },
  "cumsum": {
    "scope": "rust",
    "prefix": "cumsum",
    "body": [
      "use cumsum::*;",
      "pub mod cumsum {",
      "    pub struct CumSum {",
      "        pub cumsum: Vec<i64>,",
      "    }",
      "    impl CumSum {",
      "        /// 計算量: O(|xs|)",
      "        pub fn new(xs: &Vec<i64>) -> CumSum {",
      "            let mut cumsum = vec![0; xs.len() + 1];",
      "            for i in 1..xs.len() + 1 {",
      "                cumsum[i] = cumsum[i - 1] + xs[i - 1];",
      "            }",
      "            CumSum { cumsum }",
      "        }",
      "        /// 計算量: O(1)",
      "        pub fn get_interval_sum(&self, begin: usize, end: usize) -> i64 {",
      "            self.cumsum[end] - self.cumsum[begin]",
      "        }",
      "    }",
      "}"
    ]
  },
  "cumsum_2d": {
    "scope": "rust",
    "prefix": "cumsum_2d",
    "body": [
      "use cumsum_2d::*;",
      "pub mod cumsum_2d {",
      "    pub struct CumSum2D {",
      "        pub cumsum: Vec<Vec<i64>>,",
      "    }",
      "    impl CumSum2D {",
      "        pub fn new(xss: &Vec<Vec<i64>>) -> CumSum2D {",
      "            if xss.is_empty() {",
      "                return CumSum2D { cumsum: vec![vec![0]] };",
      "            }",
      "            let height = xss.len();",
      "            let width = xss[0].len();",
      "            let mut cumsum = vec![vec![0; width + 1]; height + 1];",
      "            for y in 1..height + 1 {",
      "                for x in 1..width + 1 {",
      "                    cumsum[y][x] = cumsum[y - 1][x] + cumsum[y][x - 1] - cumsum[y - 1][x - 1]",
      "                        + xss[y - 1][x - 1];",
      "                }",
      "            }",
      "            CumSum2D { cumsum }",
      "        }",
      "        pub fn get_rect_sum(&self, (x1, y1): (usize, usize), (x2, y2): (usize, usize)) -> i64 {",
      "            self.cumsum[y2][x2] - self.cumsum[y2][x1] - self.cumsum[y1][x2] + self.cumsum[y1][x1]",
      "        }",
      "    }",
      "}"
    ]
  },
  "edge": {
    "scope": "rust",
    "prefix": "edge",
    "body": [
      "#[derive(Clone, Copy, Debug, PartialEq, Eq)]",
      "pub struct Edge {",
      "    from: usize,",
      "    to: usize,",
      "}",
      "impl Edge {",
      "    pub fn new(from: usize, to: usize) -> Self {",
      "        Self { from, to }",
      "    }",
      "}",
      "pub fn make_adj(n_vertex: usize, edges: &[Edge]) -> Vec<Vec<Edge>> {",
      "    let mut adj = vec![vec![]; n_vertex];",
      "    for &e in edges {",
      "        adj[e.from].push(e);",
      "    }",
      "    adj",
      "}"
    ]
  },
  "fn_guard": {
    "scope": "rust",
    "prefix": "fn_guard",
    "body": [
      "pub fn guard(p: bool) -> Option<()> {",
      "    if p {",
      "        Some(())",
      "    } else {",
      "        None",
      "    }",
      "}"
    ]
  },
  "has_cycle": {
    "scope": "rust",
    "prefix": "has_cycle",
    "body": [
      "pub fn has_cycle(n_vertex: usize, edges: &[Edge]) -> bool {",
      "    let mut uf = UnionFind::new(n_vertex);",
      "    for &e in edges {",
      "        if uf.equiv(e.from, e.to) {",
      "            return true;",
      "        }",
      "        uf.union(e.from, e.to);",
      "    }",
      "    false",
      "}"
    ]
  },
  "is_bipartite_graph": {
    "scope": "rust",
    "prefix": "is_bipartite_graph",
    "body": [
      "#[allow(clippy::collapsible_else_if)]",
      "pub fn is_bipartite_graph(adj: &Vec<Vec<Edge>>) -> bool {",
      "    let n_vertex = adj.len();",
      "    let mut visited = vec![false; n_vertex];",
      "    let mut odd_even_list = vec![-1; n_vertex];",
      "    for init in 0..n_vertex {",
      "        if visited[init] {",
      "            continue;",
      "        }",
      "        let mut open: Queue<usize> = Queue::new();",
      "        open.push(init);",
      "        visited[init] = true;",
      "        odd_even_list[init] = 0;",
      "        while let Some(current) = open.pop() {",
      "            for &e in &adj[current] {",
      "                if !visited[e.to] {",
      "                    visited[e.to] = true;",
      "                    open.push(e.to);",
      "                    odd_even_list[e.to] = (odd_even_list[e.from] + 1) % 2;",
      "                } else {",
      "                    if odd_even_list[e.from] == odd_even_list[e.to] {",
      "                        return false;",
      "                    }",
      "                }",
      "            }",
      "        }",
      "    }",
      "    true",
      "}"
    ]
  },
  "is_bipartite_graph_by_uf": {
    "scope": "rust",
    "prefix": "is_bipartite_graph_by_uf",
    "body": [
      "pub fn is_bipartite_graph_by_uf(n_vertex: usize, edges: &[Edge]) -> bool {",
      "    let mut uf = UnionFind::new(2 * n_vertex);",
      "    for &e in edges {",
      "        uf.union(e.from, e.to + n_vertex);",
      "        uf.union(e.from + n_vertex, e.to);",
      "    }",
      "    (0..n_vertex).all(|i| !uf.equiv(i, i + n_vertex))",
      "}"
    ]
  },
  "iter_product": {
    "scope": "rust",
    "prefix": "iter_product",
    "body": [
      "use iter_product::*;",
      "mod iter_product {",
      "    pub trait Product2<A>: Sized {",
      "        fn product2<I: Iterator<Item = A>>(iter: I) -> Self;",
      "    }",
      "    impl<'a, T: num::One + std::ops::Mul<T, Output = T> + Copy> Product2<&'a T> for T {",
      "        fn product2<I: Iterator<Item = &'a T>>(iter: I) -> Self {",
      "            iter.fold(Self::one(), |acc, x| acc * (*x))",
      "        }",
      "    }",
      "    impl<T: num::One + std::ops::Mul<T, Output = T> + Copy> Product2<T> for T {",
      "        fn product2<I: Iterator<Item = T>>(iter: I) -> Self {",
      "            iter.fold(Self::one(), |acc, x| acc * x)",
      "        }",
      "    }",
      "    pub trait IteratorExtProduct2: Iterator + Sized {",
      "        fn product2<S>(self) -> S",
      "        where",
      "            Self: Sized,",
      "            S: Product2<Self::Item>,",
      "        {",
      "            Product2::product2(self)",
      "        }",
      "    }",
      "    impl<T: Iterator> IteratorExtProduct2 for T {}",
      "}"
    ]
  },
  "iter_sum": {
    "scope": "rust",
    "prefix": "iter_sum",
    "body": [
      "use iter_sum::*;",
      "pub mod iter_sum {",
      "    pub trait Sum2<A>: Sized {",
      "        fn sum2<I: Iterator<Item = A>>(iter: I) -> Self;",
      "    }",
      "    impl<'a, T: num::Zero + std::ops::Add<T, Output = T> + Copy> Sum2<&'a T> for T {",
      "        fn sum2<I: Iterator<Item = &'a T>>(iter: I) -> Self {",
      "            iter.fold(Self::zero(), |acc, x| acc + *x)",
      "        }",
      "    }",
      "    impl<T: num::Zero + std::ops::Add<T, Output = T> + Copy> Sum2<T> for T {",
      "        fn sum2<I: Iterator<Item = T>>(iter: I) -> Self {",
      "            iter.fold(Self::zero(), |acc, x| acc + x)",
      "        }",
      "    }",
      "    pub trait IteratorExtSum2: Iterator + Sized {",
      "        fn sum2<S>(self) -> S",
      "        where",
      "            Self: Sized,",
      "            S: Sum2<Self::Item>,",
      "        {",
      "            Sum2::sum2(self)",
      "        }",
      "    }",
      "    impl<T: Iterator> IteratorExtSum2 for T {}",
      "}"
    ]
  },
  "lower_bound": {
    "scope": "rust",
    "prefix": "lower_bound",
    "body": [
      "/// 二分探索をする",
      "/// ```text",
      "/// ng ng ng ok ok ok",
      "///          ↑ここの引数の値を返す",
      "/// ```",
      "/// 計算量: O(log(|ok - ng|))",
      "/// ## Arguments",
      "/// * ok != ng",
      "/// * |ok - ng| <= 2^63 - 1, |ok + ng| <= 2^63 - 1",
      "/// * p の定義域について",
      "///     * ng < ok の場合、p は区間 ng..ok で定義されている。",
      "///     * ok < ng の場合、p は区間 ok..ng で定義されている。",
      "/// * p の単調性について",
      "///     * ng < ok の場合、p は単調増加",
      "///     * ok < ng の場合、p は単調減少",
      "/// ## Return",
      "/// * ng < ok の場合: I = { i in ng..ok | p(i) == true } としたとき",
      "///     * I が空でなければ、min I を返す。",
      "///     * I が空ならば、ok を返す。",
      "/// * ok < ng の場合: I = { i in ok..ng | p(i) == true } としたとき",
      "///     * I が空でなければ、max I を返す。",
      "///     * I が空ならば、ok を返す。",
      "pub fn bin_search<F>(mut ok: i64, mut ng: i64, p: F) -> i64",
      "where",
      "    F: Fn(i64) -> bool,",
      "{",
      "    assert!(ok != ng);",
      "    assert!(ok.checked_sub(ng).is_some());",
      "    assert!(ok.checked_add(ng).is_some());",
      "    while num::abs(ok - ng) > 1 {",
      "        let mid = (ok + ng) / 2;",
      "        assert!(mid != ok);",
      "        assert!(mid != ng);",
      "        if p(mid) {",
      "            ok = mid;",
      "        } else {",
      "            ng = mid;",
      "        }",
      "    }",
      "    ok",
      "}",
      "/// 指定された要素以上の値が現れる最初の位置を返す。",
      "/// 計算量: O(log(|xs|))",
      "/// ## Arguments",
      "/// * xs: 単調増加",
      "///     * 単調増加でなくても、 `|i| xs[i] >= key` が単調ならOK",
      "/// ## Return",
      "/// `I = {i in 0..xs.len() | xs[i] >= key}` としたとき、`min I` を返す。",
      "/// ただし、`I` が空の場合は `xs.len()` を返す",
      "/// 戻り値は、区間 `0..=xs.len()` の間で返る。",
      "pub fn lower_bound<T: PartialOrd>(xs: &[T], key: T) -> usize {",
      "    let pred = |i: i64| xs[i as usize] >= key;",
      "    bin_search(xs.len() as i64, -1_i64, pred) as usize",
      "}"
    ]
  },
  "lower_bound_dec": {
    "scope": "rust",
    "prefix": "lower_bound_dec",
    "body": [
      "/// 二分探索をする",
      "/// ```text",
      "/// ng ng ng ok ok ok",
      "///          ↑ここの引数の値を返す",
      "/// ```",
      "/// 計算量: O(log(|ok - ng|))",
      "/// ## Arguments",
      "/// * ok != ng",
      "/// * |ok - ng| <= 2^63 - 1, |ok + ng| <= 2^63 - 1",
      "/// * p の定義域について",
      "///     * ng < ok の場合、p は区間 ng..ok で定義されている。",
      "///     * ok < ng の場合、p は区間 ok..ng で定義されている。",
      "/// * p の単調性について",
      "///     * ng < ok の場合、p は単調増加",
      "///     * ok < ng の場合、p は単調減少",
      "/// ## Return",
      "/// * ng < ok の場合: I = { i in ng..ok | p(i) == true } としたとき",
      "///     * I が空でなければ、min I を返す。",
      "///     * I が空ならば、ok を返す。",
      "/// * ok < ng の場合: I = { i in ok..ng | p(i) == true } としたとき",
      "///     * I が空でなければ、max I を返す。",
      "///     * I が空ならば、ok を返す。",
      "pub fn bin_search<F>(mut ok: i64, mut ng: i64, p: F) -> i64",
      "where",
      "    F: Fn(i64) -> bool,",
      "{",
      "    assert!(ok != ng);",
      "    assert!(ok.checked_sub(ng).is_some());",
      "    assert!(ok.checked_add(ng).is_some());",
      "    while num::abs(ok - ng) > 1 {",
      "        let mid = (ok + ng) / 2;",
      "        assert!(mid != ok);",
      "        assert!(mid != ng);",
      "        if p(mid) {",
      "            ok = mid;",
      "        } else {",
      "            ng = mid;",
      "        }",
      "    }",
      "    ok",
      "}",
      "/// 指定された要素以下の値が現れる最初の位置を返す。",
      "/// 計算量: O(log(|xs|))",
      "/// ## Arguments",
      "/// * xs: 単調減少",
      "///     * 単調減少でなくても、 `|i| xs[i] <= key` が単調ならOK",
      "/// ## Return",
      "/// `I = {i in 0..xs.len() | xs[i] <= key}` としたとき、`min I` を返す。",
      "/// ただし、`I` が空の場合は `xs.len()` を返す",
      "/// 戻り値は、区間 `0..=xs.len()` の間で返る。",
      "pub fn lower_bound_dec<T: PartialOrd>(xs: &[T], key: T) -> usize {",
      "    let pred = |i: i64| xs[i as usize] <= key;",
      "    bin_search(xs.len() as i64, -1_i64, pred) as usize",
      "}"
    ]
  },
  "math_tools": {
    "scope": "rust",
    "prefix": "math_tools",
    "body": [
      "use math_tools::*;",
      "pub mod math_tools {",
      "    use num::Integer;",
      "    use num_integer::Roots;",
      "    use std::collections::HashMap;",
      "    /// O(sqrt(n))",
      "    pub fn divisor(n: i64) -> Vec<i64> {",
      "        assert!(n >= 1);",
      "        let mut retval: Vec<i64> = Vec::new();",
      "        for i in 1..=n.sqrt() {",
      "            if n.is_multiple_of(&i) {",
      "                retval.push(i);",
      "                if i * i != n {",
      "                    retval.push(n / i);",
      "                }",
      "            }",
      "        }",
      "        retval",
      "    }",
      "    /// 計算量: O(sqrt(n))",
      "    pub fn is_prime(n: i64) -> bool {",
      "        if n <= 1 {",
      "            return false;",
      "        }",
      "        for i in 2..=n.sqrt() {",
      "            if n.is_multiple_of(&i) {",
      "                return false;",
      "            }",
      "        }",
      "        true",
      "    }",
      "    /// 計算量: O(sqrt(n))",
      "    pub fn prime_factorize(n: i64) -> HashMap<i64, i64> {",
      "        assert!(n >= 1);",
      "        let mut cnt_table: HashMap<i64, i64> = HashMap::new();",
      "        let mut n = n;",
      "        for i in 2..=n.sqrt() {",
      "            if n.is_multiple_of(&i) {",
      "                let mut cnt = 0;",
      "                while n.is_multiple_of(&i) {",
      "                    n /= i;",
      "                    cnt += 1;",
      "                }",
      "                cnt_table.insert(i, cnt);",
      "            }",
      "        }",
      "        if n != 1 {",
      "            cnt_table.insert(n, 1);",
      "        }",
      "        cnt_table",
      "    }",
      "    /// 計算量: O(sqrt(n))",
      "    pub fn euler_phi(n: i64) -> i64 {",
      "        assert!(n >= 1);",
      "        let pf = prime_factorize(n);",
      "        let mut res = n;",
      "        for p in pf.keys() {",
      "            res = res / p * (p - 1);",
      "        }",
      "        res",
      "    }",
      "    fn frac0<T>(n: T, acc: T) -> T",
      "    where",
      "        T: std::ops::Sub<Output = T> + std::ops::Mul + num::Zero + num::One + Copy,",
      "    {",
      "        if n.is_zero() {",
      "            acc",
      "        } else {",
      "            frac0(n - T::one(), n * acc)",
      "        }",
      "    }",
      "    ///計算量: O(n)",
      "    pub fn frac<T>(n: T) -> T",
      "    where",
      "        T: std::ops::Sub<Output = T> + std::ops::Mul + num::Zero + num::One + Copy,",
      "    {",
      "        frac0(n, T::one())",
      "    }",
      "    /// 計算量: O(n)",
      "    pub fn permutation<T>(n: T, k: T) -> T",
      "    where",
      "        T: std::ops::Sub<Output = T>",
      "            + std::ops::Mul",
      "            + std::ops::Div<Output = T>",
      "            + num::Zero",
      "            + num::One",
      "            + Copy,",
      "    {",
      "        frac(n) / frac(n - k)",
      "    }",
      "    /// 計算量: O(n)",
      "    pub fn comb<T>(n: T, k: T) -> T",
      "    where",
      "        T: std::ops::Sub<Output = T>",
      "            + std::ops::Mul",
      "            + std::ops::Div<Output = T>",
      "            + num::Zero",
      "            + num::One",
      "            + Copy,",
      "    {",
      "        frac(n) / frac(n - k) / frac(k)",
      "    }",
      "}"
    ]
  },
  "mod_ext_int": {
    "scope": "rust",
    "prefix": "mod_ext_int",
    "body": [
      "use mod_ext_int::ExtInt::{self, *};",
      "pub mod mod_ext_int {",
      "    use std::{cmp::Ordering, ops::Add};",
      "    use ExtInt::*;",
      "    #[derive(Clone, Copy, Debug, PartialEq, Eq)]",
      "    pub enum ExtInt {",
      "        Inf,",
      "        Fin(i64),",
      "    }",
      "    impl ExtInt {",
      "        pub fn get_fin(self) -> i64 {",
      "            match self {",
      "                Fin(val) => val,",
      "                Inf => panic!(\"called `ExtInt::get_fin()` on a `Fin` value\"),",
      "            }",
      "        }",
      "        pub fn get_fin_or(self, default: i64) -> i64 {",
      "            match self {",
      "                Fin(val) => val,",
      "                Inf => default,",
      "            }",
      "        }",
      "        pub fn is_fin(self) -> bool {",
      "            matches!(self, Fin(_))",
      "        }",
      "        pub fn is_inf(self) -> bool {",
      "            matches!(self, Inf)",
      "        }",
      "        pub fn to_option(self) -> Option<i64> {",
      "            match self {",
      "                Inf => None,",
      "                Fin(a) => Some(a),",
      "            }",
      "        }",
      "        pub fn from_option(opt: Option<i64>) -> ExtInt {",
      "            match opt {",
      "                Some(a) => Fin(a),",
      "                None => Inf,",
      "            }",
      "        }",
      "    }",
      "    impl Add for ExtInt {",
      "        type Output = ExtInt;",
      "        fn add(self, rhs: Self) -> Self::Output {",
      "            match (self, rhs) {",
      "                (Inf, Inf) => Inf,",
      "                (Inf, Fin(_)) => Inf,",
      "                (Fin(_), Inf) => Inf,",
      "                (Fin(a), Fin(b)) => Fin(a + b),",
      "            }",
      "        }",
      "    }",
      "    impl PartialOrd for ExtInt {",
      "        fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {",
      "            match (self, other) {",
      "                (Inf, Inf) => Some(Ordering::Equal),",
      "                (Inf, Fin(_)) => Some(Ordering::Greater),",
      "                (Fin(_), Inf) => Some(Ordering::Less),",
      "                (Fin(a), Fin(b)) => PartialOrd::partial_cmp(a, b),",
      "            }",
      "        }",
      "    }",
      "    impl Ord for ExtInt {",
      "        fn cmp(&self, other: &Self) -> Ordering {",
      "            self.partial_cmp(other).unwrap()",
      "        }",
      "    }",
      "}"
    ]
  },
  "mod_neg_ext_int": {
    "scope": "rust",
    "prefix": "mod_neg_ext_int",
    "body": [
      "use mod_neg_ext_int::NegExtInt::{self, *};",
      "pub mod mod_neg_ext_int {",
      "    use std::{cmp::Ordering, ops::Add};",
      "    use NegExtInt::*;",
      "    #[derive(Clone, Copy, Debug, PartialEq, Eq)]",
      "    pub enum NegExtInt {",
      "        NegInf,",
      "        Fin(i64),",
      "    }",
      "    impl NegExtInt {",
      "        pub fn get_fin(self) -> i64 {",
      "            match self {",
      "                Fin(val) => val,",
      "                NegInf => panic!(\"called `NegExtInt::get_fin()` on a `Fin` value\"),",
      "            }",
      "        }",
      "        pub fn get_fin_or(self, default: i64) -> i64 {",
      "            match self {",
      "                Fin(val) => val,",
      "                NegInf => default,",
      "            }",
      "        }",
      "        pub fn is_fin(self) -> bool {",
      "            matches!(self, Fin(_))",
      "        }",
      "        pub fn is_neginf(self) -> bool {",
      "            matches!(self, NegInf)",
      "        }",
      "        pub fn to_option(self) -> Option<i64> {",
      "            match self {",
      "                NegInf => None,",
      "                Fin(a) => Some(a),",
      "            }",
      "        }",
      "        pub fn from_option(opt: Option<i64>) -> NegExtInt {",
      "            match opt {",
      "                Some(a) => Fin(a),",
      "                None => NegInf,",
      "            }",
      "        }",
      "    }",
      "    impl Add for NegExtInt {",
      "        type Output = NegExtInt;",
      "        fn add(self, rhs: Self) -> Self::Output {",
      "            match (self, rhs) {",
      "                (NegInf, NegInf) => NegInf,",
      "                (NegInf, Fin(_)) => NegInf,",
      "                (Fin(_), NegInf) => NegInf,",
      "                (Fin(a), Fin(b)) => Fin(a + b),",
      "            }",
      "        }",
      "    }",
      "    impl PartialOrd for NegExtInt {",
      "        fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {",
      "            match (self, other) {",
      "                (NegInf, NegInf) => Some(Ordering::Equal),",
      "                (NegInf, Fin(_)) => Some(Ordering::Less),",
      "                (Fin(_), NegInf) => Some(Ordering::Greater),",
      "                (Fin(a), Fin(b)) => PartialOrd::partial_cmp(a, b),",
      "            }",
      "        }",
      "    }",
      "    impl Ord for NegExtInt {",
      "        fn cmp(&self, other: &Self) -> Ordering {",
      "            self.partial_cmp(other).unwrap()",
      "        }",
      "    }",
      "}"
    ]
  },
  "mod_queue": {
    "scope": "rust",
    "prefix": "mod_queue",
    "body": [
      "use mod_queue::*;",
      "pub mod mod_queue {",
      "    use std::collections::VecDeque;",
      "    #[derive(Clone, Debug, PartialEq, Eq)]",
      "    pub struct Queue<T> {",
      "        raw: VecDeque<T>,",
      "    }",
      "    impl<T> Queue<T> {",
      "        pub fn new() -> Self {",
      "            Queue { raw: VecDeque::new() }",
      "        }",
      "        pub fn push(&mut self, value: T) {",
      "            self.raw.push_front(value)",
      "        }",
      "        pub fn pop(&mut self) -> Option<T> {",
      "            self.raw.pop_back()",
      "        }",
      "        pub fn peek(&self) -> Option<&T> {",
      "            self.raw.back()",
      "        }",
      "        pub fn is_empty(&self) -> bool {",
      "            self.raw.is_empty()",
      "        }",
      "    }",
      "    impl<T> Default for Queue<T> {",
      "        fn default() -> Self {",
      "            Self::new()",
      "        }",
      "    }",
      "}"
    ]
  },
  "mod_stack": {
    "scope": "rust",
    "prefix": "mod_stack",
    "body": [
      "use mod_stack::*;",
      "pub mod mod_stack {",
      "    #[derive(Clone, Debug, PartialEq, Eq)]",
      "    pub struct Stack<T> {",
      "        raw: Vec<T>,",
      "    }",
      "    impl<T> Stack<T> {",
      "        pub fn new() -> Self {",
      "            Stack { raw: Vec::new() }",
      "        }",
      "        pub fn push(&mut self, value: T) {",
      "            self.raw.push(value)",
      "        }",
      "        pub fn pop(&mut self) -> Option<T> {",
      "            self.raw.pop()",
      "        }",
      "        pub fn peek(&self) -> Option<&T> {",
      "            self.raw.last()",
      "        }",
      "        pub fn is_empty(&self) -> bool {",
      "            self.raw.is_empty()",
      "        }",
      "    }",
      "    impl<T> Default for Stack<T> {",
      "        fn default() -> Self {",
      "            Self::new()",
      "        }",
      "    }",
      "}"
    ]
  },
  "modint_to_rational": {
    "scope": "rust",
    "prefix": "modint_to_rational",
    "body": [
      "use modint_to_rational::*;",
      "pub mod modint_to_rational {",
      "    use num_rational::Rational64;",
      "    pub trait ToRational {",
      "        fn to_rational(&self) -> Option<Rational64>;",
      "        fn to_rational_str(&self) -> String {",
      "            self.to_rational().map(|x| x.to_string()).unwrap_or(\"cannot reconstruct\".to_string())",
      "        }",
      "    }",
      "    impl ToRational for ac_library::ModInt998244353 {",
      "        /// 注意: 1000 * 2000 = 2*10^6 の計算をしている",
      "        fn to_rational(&self) -> Option<Rational64> {",
      "            if self.val() == 0 {",
      "                return Some(Rational64::new(0, 1));",
      "            }",
      "            for denom in 1..1000 {",
      "                let denom_inv = Self::new(denom).inv();",
      "                for numer in -1000..1000 {",
      "                    if *self == denom_inv * Self::new(numer) {",
      "                        return Some(Rational64::new(numer, denom));",
      "                    }",
      "                }",
      "            }",
      "            None",
      "        }",
      "    }",
      "}"
    ]
  },
  "pos": {
    "scope": "rust",
    "prefix": "pos",
    "body": [
      "use pos::*;",
      "pub mod pos {",
      "    use std::ops::{Add, AddAssign, Mul, Neg, Sub, SubAssign};",
      "    #[derive(Clone, Copy, Debug, PartialEq, Eq)]",
      "    pub struct Pos<T> {",
      "        pub x: T,",
      "        pub y: T,",
      "    }",
      "    impl<T> Pos<T> {",
      "        pub fn new(x: T, y: T) -> Pos<T> {",
      "            Pos { x, y }",
      "        }",
      "    }",
      "    impl<T: Mul<Output = T> + Copy> Pos<T> {",
      "        pub fn scala_mul(self, rhs: T) -> Pos<T> {",
      "            Pos::new(self.x * rhs, self.y * rhs)",
      "        }",
      "    }",
      "    impl<T: Add<Output = T> + Mul<Output = T> + Copy> Pos<T> {",
      "        pub fn norm_square(self) -> T {",
      "            self.x * self.x + self.y * self.y",
      "        }",
      "    }",
      "    impl<T: Add<Output = T> + Copy> Add for Pos<T> {",
      "        type Output = Pos<T>;",
      "        fn add(self, rhs: Self) -> Self::Output {",
      "            Pos::new(self.x + rhs.x, self.y + rhs.y)",
      "        }",
      "    }",
      "    impl<T: Sub<Output = T> + Copy> Sub for Pos<T> {",
      "        type Output = Pos<T>;",
      "        fn sub(self, rhs: Self) -> Self::Output {",
      "            Pos::new(self.x - rhs.x, self.y - rhs.y)",
      "        }",
      "    }",
      "    impl<T: Neg<Output = T>> Neg for Pos<T> {",
      "        type Output = Self;",
      "        fn neg(self) -> Self::Output {",
      "            Pos::new(-self.x, -self.y)",
      "        }",
      "    }",
      "    impl<T: num_traits::Zero + Copy> num_traits::Zero for Pos<T> {",
      "        fn zero() -> Self {",
      "            Pos::new(T::zero(), T::zero())",
      "        }",
      "        fn is_zero(&self) -> bool {",
      "            self.x.is_zero() && self.y.is_zero()",
      "        }",
      "    }",
      "    impl<T: Add<Output = T> + Copy> AddAssign for Pos<T> {",
      "        fn add_assign(&mut self, rhs: Self) {",
      "            *self = *self + rhs",
      "        }",
      "    }",
      "    impl<T: Sub<Output = T> + Copy> SubAssign for Pos<T> {",
      "        fn sub_assign(&mut self, rhs: Self) {",
      "            *self = *self - rhs",
      "        }",
      "    }",
      "    pub const DIR8_LIST: [Pos<i64>; 8] = [",
      "        Pos { x: 0, y: 1 },",
      "        Pos { x: 1, y: 1 },",
      "        Pos { x: 1, y: 0 },",
      "        Pos { x: 1, y: -1 },",
      "        Pos { x: 0, y: -1 },",
      "        Pos { x: -1, y: -1 },",
      "        Pos { x: -1, y: 0 },",
      "        Pos { x: -1, y: 1 },",
      "    ];",
      "    pub const DIR4_LIST: [Pos<i64>; 4] =",
      "        [Pos { x: 0, y: 1 }, Pos { x: 1, y: 0 }, Pos { x: 0, y: -1 }, Pos { x: -1, y: 0 }];",
      "}"
    ]
  },
  "print_arr": {
    "scope": "rust",
    "prefix": "print_arr",
    "body": [
      "use print_arr::*;",
      "pub mod print_arr {",
      "    use ndarray::{Array2, Array3};",
      "    use proconio::fastout;",
      "    #[fastout]",
      "    pub fn print_arr<T: std::fmt::Debug>(arr: &[T]) {",
      "        for a in arr {",
      "            print!(\"{:?} \", a);",
      "        }",
      "        println!();",
      "    }",
      "    #[fastout]",
      "    pub fn print_arr2<T: std::fmt::Debug>(arr: &Array2<T>) {",
      "        for i in 0..arr.nrows() {",
      "            for j in 0..arr.ncols() {",
      "                print!(\"{:?} \", arr[[i, j]]);",
      "            }",
      "            println!();",
      "        }",
      "    }",
      "    #[fastout]",
      "    pub fn print_arr3<T: std::fmt::Debug>(arr: &Array3<T>) {",
      "        let shape = arr.shape();",
      "        for i in 0..shape[0] {",
      "            for j in 0..shape[1] {",
      "                for k in 0..shape[2] {",
      "                    print!(\"{:?} \", arr[[i, j, k]]);",
      "                }",
      "                println!();",
      "            }",
      "            println!();",
      "        }",
      "    }",
      "}"
    ]
  },
  "print_vec": {
    "scope": "rust",
    "prefix": "print_vec",
    "body": [
      "use print_vec::*;",
      "pub mod print_vec {",
      "    use itertools::Itertools;",
      "    use proconio::fastout;",
      "    #[fastout]",
      "    pub fn print_vec<T: std::fmt::Debug>(arr: &[T]) {",
      "        for a in arr {",
      "            println!(\"{:?}\", a);",
      "        }",
      "    }",
      "    #[fastout]",
      "    pub fn print_vec_1line<T: std::fmt::Debug>(arr: &[T]) {",
      "        let msg = arr.iter().map(|x| format!(\"{:?}\", x)).join(\" \");",
      "        println!(\"{}\", msg);",
      "    }",
      "    #[fastout]",
      "    pub fn print_vec2<T: std::fmt::Debug>(arr: &Vec<Vec<T>>) {",
      "        for row in arr {",
      "            let msg = row.iter().map(|x| format!(\"{:?}\", x)).join(\" \");",
      "            println!(\"{}\", msg);",
      "        }",
      "    }",
      "    pub fn print_bytes(bytes: &[u8]) {",
      "        let msg = String::from_utf8(bytes.to_vec()).unwrap();",
      "        println!(\"{}\", msg);",
      "    }",
      "    #[fastout]",
      "    pub fn print_vec_bytes(vec_bytes: &[Vec<u8>]) {",
      "        for row in vec_bytes {",
      "            let msg = String::from_utf8(row.to_vec()).unwrap();",
      "            println!(\"{}\", msg);",
      "        }",
      "    }",
      "}"
    ]
  },
  "rf": {
    "scope": "rust",
    "prefix": "rf",
    "body": [
      "use num::{One, Zero};",
      "use rf::*;",
      "pub mod rf {",
      "    pub const MOD: i64 = 998_244_353;",
      "    #[derive(Clone, Copy, Debug, PartialEq, Eq, Default)]",
      "    pub struct RF {",
      "        rep: i64,",
      "    }",
      "    impl RF {",
      "        pub fn new(x: i64) -> RF {",
      "            RF { rep: x.rem_euclid(MOD) }",
      "        }",
      "        pub fn rep(self) -> i64 {",
      "            self.rep",
      "        }",
      "    }",
      "    impl RF {",
      "        pub fn inv(self) -> Self {",
      "            num::pow(self, (MOD - 2) as usize)",
      "        }",
      "    }",
      "    impl num_traits::Zero for RF {",
      "        fn zero() -> Self {",
      "            RF::new(0)",
      "        }",
      "        fn is_zero(&self) -> bool {",
      "            self.rep == 0",
      "        }",
      "    }",
      "    impl num_traits::One for RF {",
      "        fn one() -> Self {",
      "            RF::new(1)",
      "        }",
      "    }",
      "    macro_rules ! bi_ops_impl {(\\$ std_ops : ident , \\$ fn : ident , \\$ op : tt ) => {impl std :: ops ::\\$ std_ops for RF {type Output = Self ; fn \\$ fn (self , rhs : Self ) -> Self :: Output {RF :: new (self . rep \\$ op rhs . rep ) } } } ; }",
      "    bi_ops_impl ! (Add , add , + );",
      "    bi_ops_impl ! (Sub , sub , - );",
      "    bi_ops_impl ! (Mul , mul , * );",
      "    impl std::ops::Div for RF {",
      "        type Output = Self;",
      "        fn div(self, rhs: Self) -> Self::Output {",
      "            std::ops::Mul::mul(self, rhs.inv())",
      "        }",
      "    }",
      "    macro_rules ! bi_ops_assign_impl {(\\$ std_ops_assign : ident , \\$ fn_assign : ident , \\$ op : tt ) => {impl std :: ops ::\\$ std_ops_assign for RF {fn \\$ fn_assign (& mut self , rhs : Self ) {* self = * self \\$ op rhs } } } ; }",
      "    bi_ops_assign_impl ! (AddAssign , add_assign , + );",
      "    bi_ops_assign_impl ! (SubAssign , sub_assign , - );",
      "    bi_ops_assign_impl ! (MulAssign , mul_assign , * );",
      "    bi_ops_assign_impl ! (DivAssign , div_assign , / );",
      "    impl std::ops::Neg for RF {",
      "        type Output = Self;",
      "        fn neg(self) -> Self::Output {",
      "            RF::new(-self.rep)",
      "        }",
      "    }",
      "}"
    ]
  },
  "rf_fake": {
    "scope": "rust",
    "prefix": "rf_fake",
    "body": [
      "use num::{One, Zero};",
      "use rf_fake::*;",
      "pub mod rf_fake {",
      "    #[derive(Clone, Copy, Debug, PartialEq, Default)]",
      "    pub struct RF {",
      "        rep: f64,",
      "    }",
      "    impl RF {",
      "        pub fn new(x: f64) -> RF {",
      "            RF { rep: x }",
      "        }",
      "        pub fn rep(self) -> f64 {",
      "            self.rep",
      "        }",
      "    }",
      "    impl RF {",
      "        pub fn inv(self) -> Self {",
      "            RF::new(1.0 / self.rep)",
      "        }",
      "    }",
      "    impl num_traits::Zero for RF {",
      "        fn zero() -> Self {",
      "            RF::new(0.0)",
      "        }",
      "        fn is_zero(&self) -> bool {",
      "            f64::is_zero(&self.rep)",
      "        }",
      "    }",
      "    impl num_traits::One for RF {",
      "        fn one() -> Self {",
      "            RF::new(1.0)",
      "        }",
      "    }",
      "    macro_rules ! bi_ops_impl {(\\$ std_ops : ident , \\$ fn : ident , \\$ op : tt ) => {impl std :: ops ::\\$ std_ops for RF {type Output = Self ; fn \\$ fn (self , rhs : Self ) -> Self :: Output {RF :: new (self . rep \\$ op rhs . rep ) } } } ; }",
      "    bi_ops_impl ! (Add , add , + );",
      "    bi_ops_impl ! (Sub , sub , - );",
      "    bi_ops_impl ! (Mul , mul , * );",
      "    bi_ops_impl ! (Div , div , / );",
      "    macro_rules ! bi_ops_assign_impl {(\\$ std_ops_assign : ident , \\$ fn_assign : ident , \\$ op : tt ) => {impl std :: ops ::\\$ std_ops_assign for RF {fn \\$ fn_assign (& mut self , rhs : Self ) {* self = * self \\$ op rhs } } } ; }",
      "    bi_ops_assign_impl ! (AddAssign , add_assign , + );",
      "    bi_ops_assign_impl ! (SubAssign , sub_assign , - );",
      "    bi_ops_assign_impl ! (MulAssign , mul_assign , * );",
      "    bi_ops_assign_impl ! (DivAssign , div_assign , / );",
      "    impl std::ops::Neg for RF {",
      "        type Output = Self;",
      "        fn neg(self) -> Self::Output {",
      "            RF::new(-self.rep)",
      "        }",
      "    }",
      "}"
    ]
  },
  "rr": {
    "scope": "rust",
    "prefix": "rr",
    "body": [
      "use num::{One, Zero};",
      "use rr::*;",
      "pub mod rr {",
      "    pub const MOD: i64 = 998_244_353;",
      "    #[derive(Clone, Copy, Debug, PartialEq, Eq, Default)]",
      "    pub struct RR {",
      "        rep: i64,",
      "    }",
      "    impl RR {",
      "        pub fn new(x: i64) -> RR {",
      "            RR { rep: x.rem_euclid(MOD) }",
      "        }",
      "        pub fn rep(self) -> i64 {",
      "            self.rep",
      "        }",
      "    }",
      "    impl num_traits::Zero for RR {",
      "        fn zero() -> Self {",
      "            RR::new(0)",
      "        }",
      "        fn is_zero(&self) -> bool {",
      "            self.rep == 0",
      "        }",
      "    }",
      "    impl num_traits::One for RR {",
      "        fn one() -> Self {",
      "            RR::new(1)",
      "        }",
      "    }",
      "    macro_rules ! bi_ops_impl {(\\$ std_ops : ident , \\$ fn : ident , \\$ op : tt ) => {impl std :: ops ::\\$ std_ops for RR {type Output = Self ; fn \\$ fn (self , rhs : Self ) -> Self :: Output {RR :: new (self . rep \\$ op rhs . rep ) } } } ; }",
      "    bi_ops_impl ! (Add , add , + );",
      "    bi_ops_impl ! (Sub , sub , - );",
      "    bi_ops_impl ! (Mul , mul , * );",
      "    macro_rules ! bi_ops_assign_impl {(\\$ std_ops_assign : ident , \\$ fn_assign : ident , \\$ op : tt ) => {impl std :: ops ::\\$ std_ops_assign for RR {fn \\$ fn_assign (& mut self , rhs : Self ) {* self = * self \\$ op rhs } } } ; }",
      "    bi_ops_assign_impl ! (AddAssign , add_assign , + );",
      "    bi_ops_assign_impl ! (SubAssign , sub_assign , - );",
      "    bi_ops_assign_impl ! (MulAssign , mul_assign , * );",
      "    impl std::ops::Neg for RR {",
      "        type Output = Self;",
      "        fn neg(self) -> Self::Output {",
      "            RR::new(-self.rep)",
      "        }",
      "    }",
      "}"
    ]
  },
  "scan_iter": {
    "scope": "rust",
    "prefix": "scan_iter",
    "body": [
      "use scan_iter::*;",
      "pub mod scan_iter {",
      "    #[derive(Clone)]",
      "    pub struct Scanl<I, B, F> {",
      "        iter: I,",
      "        state: Option<B>,",
      "        f: F,",
      "    }",
      "    impl<I, B, F> Scanl<I, B, F> {",
      "        fn new(iter: I, init: B, f: F) -> Scanl<I, B, F> {",
      "            Scanl { iter, state: Some(init), f }",
      "        }",
      "    }",
      "    impl<I, B, F> Iterator for Scanl<I, B, F>",
      "    where",
      "        B: Clone + Copy,",
      "        I: Iterator,",
      "        F: FnMut(&mut B, I::Item) -> B,",
      "    {",
      "        type Item = B;",
      "        #[inline]",
      "        fn next(&mut self) -> Option<B> {",
      "            let retval = self.state?;",
      "            let a_opt = self.iter.next();",
      "            self.state = self.state.and_then(|mut s| a_opt.map(|a| (self.f)(&mut s, a)));",
      "            Some(retval)",
      "        }",
      "    }",
      "    pub trait IteratorExtScanLeft: Iterator + Sized {",
      "        fn scanl<B, F>(self, init: B, f: F) -> Scanl<Self, B, F>",
      "        where",
      "            Self: Sized,",
      "            F: FnMut(&mut B, Self::Item) -> B,",
      "        {",
      "            Scanl::new(self, init, f)",
      "        }",
      "    }",
      "    impl<T: Iterator> IteratorExtScanLeft for T {}",
      "}"
    ]
  },
  "scan_vec": {
    "scope": "rust",
    "prefix": "scan_vec",
    "body": [
      "use scan_vec::*;",
      "pub mod scan_vec {",
      "    pub fn scanl<A, B, F>(vec: &[A], init: B, mut f: F) -> Vec<B>",
      "    where",
      "        F: FnMut(&mut B, &A) -> B,",
      "        B: Copy,",
      "    {",
      "        let mut ret: Vec<B> = Vec::new();",
      "        let mut acc = init;",
      "        ret.push(acc);",
      "        for x in vec {",
      "            acc = f(&mut acc, x);",
      "            ret.push(acc);",
      "        }",
      "        ret",
      "    }",
      "    pub fn scanr<A, B, F>(vec: &[A], init: B, f: F) -> Vec<B>",
      "    where",
      "        F: FnMut(&mut B, &A) -> B,",
      "        A: Clone,",
      "        B: Copy,",
      "    {",
      "        let vec2 = vec.iter().cloned().rev().collect::<Vec<A>>();",
      "        let vec3 = scanl(&vec2, init, f);",
      "        vec3.iter().copied().rev().collect::<Vec<B>>()",
      "    }",
      "    pub fn cumsum<T>(vec: &[T]) -> Vec<T>",
      "    where",
      "        T: std::ops::Add + num::Zero + Copy,",
      "    {",
      "        scanl(vec, T::zero(), |acc, x| *acc + *x)",
      "    }",
      "    pub struct CumSum<T>",
      "    where",
      "        T: std::ops::Add<Output = T> + std::ops::Sub<Output = T> + num::Zero + Copy,",
      "    {",
      "        cumsum: Vec<T>,",
      "    }",
      "    impl<T: std::ops::Add<Output = T> + std::ops::Sub<Output = T> + num::Zero + Copy> CumSum<T> {",
      "        pub fn make(vec: &[T]) -> CumSum<T> {",
      "            CumSum { cumsum: cumsum(vec) }",
      "        }",
      "        pub fn partial_sum(&self, begin: usize, end: usize) -> T {",
      "            self.cumsum[end] - self.cumsum[begin]",
      "        }",
      "    }",
      "}"
    ]
  },
  "static_mod_int": {
    "scope": "rust",
    "prefix": "static_mod_int",
    "body": [
      "use static_mod_int::*;",
      "pub mod static_mod_int {",
      "    use ac_library::{ButterflyCache, Modulus, StaticModInt};",
      "    use std::{cell::RefCell, thread::LocalKey};",
      "    #[derive(Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Hash, Debug)]",
      "    pub enum Mod2 {}",
      "    impl Modulus for Mod2 {",
      "        const VALUE: u32 = 2;",
      "        const HINT_VALUE_IS_PRIME: bool = true;",
      "        fn butterfly_cache() -> &'static LocalKey<RefCell<Option<ButterflyCache<Self>>>> {",
      "            thread_local! {static BUTTERFLY_CACHE : RefCell < Option < ButterflyCache < Mod2 >>> = RefCell :: default () ; }",
      "            &BUTTERFLY_CACHE",
      "        }",
      "    }",
      "    pub type ModInt2 = StaticModInt<Mod2>;",
      "}"
    ]
  },
  "union_find": {
    "scope": "rust",
    "prefix": "union_find",
    "body": [
      "use union_find::*;",
      "pub mod union_find {",
      "    #[derive(Clone, Copy, Debug, PartialEq, Eq)]",
      "    struct Root {",
      "        count: i32,",
      "    }",
      "    #[derive(Clone, Copy, Debug, PartialEq, Eq)]",
      "    enum Node {",
      "        Root { root: Root },",
      "        NonRoot { parent_index: usize },",
      "    }",
      "    #[derive(Clone, Copy, Debug, PartialEq, Eq)]",
      "    struct RootAndIndex {",
      "        root: Root,",
      "        index: usize,",
      "    }",
      "    #[derive(Clone, Debug)]",
      "    pub struct UnionFind {",
      "        nodes: Vec<Node>,",
      "    }",
      "    impl UnionFind {",
      "        pub fn new(n: usize) -> UnionFind {",
      "            UnionFind { nodes: vec![Node::Root { root: Root { count: 1 } }; n] }",
      "        }",
      "        fn root_node(&mut self, index: usize) -> RootAndIndex {",
      "            match self.nodes[index] {",
      "                Node::Root { root } => RootAndIndex { root, index },",
      "                Node::NonRoot { parent_index } => {",
      "                    let root_and_index = self.root_node(parent_index);",
      "                    self.nodes[index] = Node::NonRoot { parent_index: root_and_index.index };",
      "                    root_and_index",
      "                }",
      "            }",
      "        }",
      "        pub fn root(&mut self, index: usize) -> usize {",
      "            self.root_node(index).index",
      "        }",
      "        pub fn same_count(&mut self, index: usize) -> i32 {",
      "            self.root_node(index).root.count",
      "        }",
      "        pub fn same(&mut self, x: usize, y: usize) -> bool {",
      "            self.root(x) == self.root(y)",
      "        }",
      "        pub fn num_groups(&self) -> usize {",
      "            self.nodes.iter().filter(|&node| matches!(node, Node::Root { .. })).count()",
      "        }",
      "        pub fn unite(&mut self, x: usize, y: usize) {",
      "            if self.same(x, y) {",
      "                return;",
      "            }",
      "            let x_root_node = self.root_node(x);",
      "            let y_root_node = self.root_node(y);",
      "            let x_count = x_root_node.root.count;",
      "            let y_count = y_root_node.root.count;",
      "            let x_root_index = x_root_node.index;",
      "            let y_root_index = y_root_node.index;",
      "            if x_count < y_count {",
      "                self.nodes[x_root_index] = Node::NonRoot { parent_index: y_root_index };",
      "                self.nodes[y_root_index] = Node::Root { root: Root { count: x_count + y_count } }",
      "            } else {",
      "                self.nodes[y_root_index] = Node::NonRoot { parent_index: x_root_index };",
      "                self.nodes[x_root_index] = Node::Root { root: Root { count: x_count + y_count } }",
      "            }",
      "        }",
      "    }",
      "}"
    ]
  },
  "upper_bound": {
    "scope": "rust",
    "prefix": "upper_bound",
    "body": [
      "/// 二分探索をする",
      "/// ```text",
      "/// ng ng ng ok ok ok",
      "///          ↑ここの引数の値を返す",
      "/// ```",
      "/// 計算量: O(log(|ok - ng|))",
      "/// ## Arguments",
      "/// * ok != ng",
      "/// * |ok - ng| <= 2^63 - 1, |ok + ng| <= 2^63 - 1",
      "/// * p の定義域について",
      "///     * ng < ok の場合、p は区間 ng..ok で定義されている。",
      "///     * ok < ng の場合、p は区間 ok..ng で定義されている。",
      "/// * p の単調性について",
      "///     * ng < ok の場合、p は単調増加",
      "///     * ok < ng の場合、p は単調減少",
      "/// ## Return",
      "/// * ng < ok の場合: I = { i in ng..ok | p(i) == true } としたとき",
      "///     * I が空でなければ、min I を返す。",
      "///     * I が空ならば、ok を返す。",
      "/// * ok < ng の場合: I = { i in ok..ng | p(i) == true } としたとき",
      "///     * I が空でなければ、max I を返す。",
      "///     * I が空ならば、ok を返す。",
      "pub fn bin_search<F>(mut ok: i64, mut ng: i64, p: F) -> i64",
      "where",
      "    F: Fn(i64) -> bool,",
      "{",
      "    assert!(ok != ng);",
      "    assert!(ok.checked_sub(ng).is_some());",
      "    assert!(ok.checked_add(ng).is_some());",
      "    while num::abs(ok - ng) > 1 {",
      "        let mid = (ok + ng) / 2;",
      "        assert!(mid != ok);",
      "        assert!(mid != ng);",
      "        if p(mid) {",
      "            ok = mid;",
      "        } else {",
      "            ng = mid;",
      "        }",
      "    }",
      "    ok",
      "}",
      "/// 指定された要素より大きい値が現れる最初の位置を返す。",
      "/// 計算量: O(log(|xs|))",
      "/// ## Arguments",
      "/// * xs: 単調増加",
      "///     * 単調増加でなくても、 `|i| xs[i] > key` が単調ならOK",
      "/// ## Return",
      "/// `I = {i in 0..xs.len() | xs[i] > key}` としたとき、`min I` を返す。",
      "/// ただし、`I` が空の場合は `xs.len()` を返す",
      "/// 戻り値は、区間 `0..=xs.len()` の間で返る。",
      "pub fn upper_bound<T: PartialOrd>(xs: &[T], key: T) -> usize {",
      "    let pred = |i: i64| xs[i as usize] > key;",
      "    bin_search(xs.len() as i64, -1_i64, pred) as usize",
      "}"
    ]
  },
  "upper_bound_dec": {
    "scope": "rust",
    "prefix": "upper_bound_dec",
    "body": [
      "/// 二分探索をする",
      "/// ```text",
      "/// ng ng ng ok ok ok",
      "///          ↑ここの引数の値を返す",
      "/// ```",
      "/// 計算量: O(log(|ok - ng|))",
      "/// ## Arguments",
      "/// * ok != ng",
      "/// * |ok - ng| <= 2^63 - 1, |ok + ng| <= 2^63 - 1",
      "/// * p の定義域について",
      "///     * ng < ok の場合、p は区間 ng..ok で定義されている。",
      "///     * ok < ng の場合、p は区間 ok..ng で定義されている。",
      "/// * p の単調性について",
      "///     * ng < ok の場合、p は単調増加",
      "///     * ok < ng の場合、p は単調減少",
      "/// ## Return",
      "/// * ng < ok の場合: I = { i in ng..ok | p(i) == true } としたとき",
      "///     * I が空でなければ、min I を返す。",
      "///     * I が空ならば、ok を返す。",
      "/// * ok < ng の場合: I = { i in ok..ng | p(i) == true } としたとき",
      "///     * I が空でなければ、max I を返す。",
      "///     * I が空ならば、ok を返す。",
      "pub fn bin_search<F>(mut ok: i64, mut ng: i64, p: F) -> i64",
      "where",
      "    F: Fn(i64) -> bool,",
      "{",
      "    assert!(ok != ng);",
      "    assert!(ok.checked_sub(ng).is_some());",
      "    assert!(ok.checked_add(ng).is_some());",
      "    while num::abs(ok - ng) > 1 {",
      "        let mid = (ok + ng) / 2;",
      "        assert!(mid != ok);",
      "        assert!(mid != ng);",
      "        if p(mid) {",
      "            ok = mid;",
      "        } else {",
      "            ng = mid;",
      "        }",
      "    }",
      "    ok",
      "}",
      "/// 指定された要素より小さい値が現れる最初の位置を返す。",
      "/// 計算量: O(log(|xs|))",
      "/// ## Arguments",
      "/// * xs: 単勝減少",
      "///     * 単調減少でなくても、 `|i| xs[i] < key` が単調ならOK",
      "/// ## Return",
      "/// `I = {i in 0..xs.len() | xs[i] < key}` としたとき、`min I` を返す。",
      "/// ただし、`I` が空の場合は `xs.len()` を返す",
      "/// 戻り値は、区間 `0..=xs.len()` の間で返る。",
      "pub fn upper_bound_dec<T: PartialOrd>(xs: &[T], key: T) -> usize {",
      "    let pred = |i: i64| xs[i as usize] < key;",
      "    bin_search(xs.len() as i64, -1_i64, pred) as usize",
      "}"
    ]
  },
  "vec_vec_at": {
    "scope": "rust",
    "prefix": "vec_vec_at",
    "body": [
      "use vec_vec_at::*;",
      "pub mod vec_vec_at {",
      "    use super::pos::*;",
      "    use easy_ext::ext;",
      "    #[ext]",
      "    impl<T> Vec<Vec<T>> {",
      "        pub fn at(&self, pos: Pos<i64>) -> &T {",
      "            &self[pos.y as usize][pos.x as usize]",
      "        }",
      "        pub fn at_mut(&mut self, pos: Pos<i64>) -> &mut T {",
      "            &mut self[pos.y as usize][pos.x as usize]",
      "        }",
      "    }",
      "}"
    ]
  }
}
