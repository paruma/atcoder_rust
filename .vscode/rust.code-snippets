{
	// Place your atcoder_rust ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"derive_all": {
		"scope": "rust",
		"prefix": "derive_all",
		"body": [
			"#[derive(Clone, Copy, Debug, PartialEq, Eq)]"
		],
		"description": "#[derive(Clone, Copy, Debug, PartialEq, Eq)]"
	},
	"to_vec": {
		"scope": "rust",
		"prefix": "to_vec",
		"body": [
			"collect::<Vec<_>>()"
		],
		"description": "collect::<Vec<_>>()"
	},
	// cf: dbg!
	"println": {
		"scope": "rust",
		"prefix": "vprint",
		"body": [
			"println!(\"{$1}\", $2)"
		],
		"description": "println"
	},
	"macro_odo": {
		"scope": "rust",
		"prefix": "macro_odo",
		"body": [
			"#[allow(unused_macros)]",
			"macro_rules! odo {",
			"        (let \\$p: pat = \\$e: expr ; \\$(\\$t:tt)+)=>{",
			"            { let \\$p = \\$e ; odo! {\\$(\\$t)+} }",
			"        };",
			"        (let \\$p: ident : \\$ty: ty = \\$e: expr ; \\$(\\$t:tt)+)=>{",
			"            { let \\$p: \\$ty = \\$e ; odo! {\\$(\\$t)+} }",
			"        };",
			"        (\\$i:ident <- \\$e:expr; \\$(\\$t:tt)+) => {",
			"            \\$e.and_then(move|\\$i| odo!{\\$(\\$t)+})",
			"        };",
			"        (\\$e:expr; \\$(\\$t:tt)+) => {",
			"            \\$e.and_then(move|_| odo!{\\$(\\$t)+})",
			"        };",
			"        (guard \\$e:expr; \\$(\\$t:tt)+)=>{",
			"            (\\$e).then(move|| odo!{\\$(\\$t)+}).flatten()",
			"        };",
			"        (\\$e:expr) => {",
			"            \\$e",
			"        };",
			"}",
		]
	},
	"cl_odo": {
		"scope": "rust",
		"prefix": "cl_odo",
		"body": [
			"|| -> Option<_> {",
			"    $1",
			"}();",
		],
	},
}